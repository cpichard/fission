# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fission
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_Context(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_Context
    __del__ = lambda self : None;
    __swig_setmethods__["m_first"] = _fission.Context_m_first_set
    __swig_getmethods__["m_first"] = _fission.Context_m_first_get
    if _newclass:m_first = _swig_property(_fission.Context_m_first_get, _fission.Context_m_first_set)
    __swig_setmethods__["m_last"] = _fission.Context_m_last_set
    __swig_getmethods__["m_last"] = _fission.Context_m_last_get
    if _newclass:m_last = _swig_property(_fission.Context_m_last_get, _fission.Context_m_last_set)
Context_swigregister = _fission.Context_swigregister
Context_swigregister(Context)

class Engine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_Engine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_Engine
    __del__ = lambda self : None;
    def compute_async(*args): return _fission.Engine_compute_async(*args)
    def compute(*args): return _fission.Engine_compute(*args)
Engine_swigregister = _fission.Engine_swigregister
Engine_swigregister(Engine)

nodename = _fission.nodename
class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _fission.delete_Node
    __del__ = lambda self : None;
    def name(*args): return _fission.Node_name(*args)
Node_swigregister = _fission.Node_swigregister
Node_swigregister(Node)

connect = _fission.connect
disconnect = _fission.disconnect
setParameter = _fission.setParameter
class GLDisplay(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLDisplay, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLDisplay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_GLDisplay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_GLDisplay
    __del__ = lambda self : None;
    def displayLastResult(*args): return _fission.GLDisplay_displayLastResult(*args)
GLDisplay_swigregister = _fission.GLDisplay_swigregister
GLDisplay_swigregister(GLDisplay)

class ImageReader(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageReader, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageReader, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _fission.delete_ImageReader
    __del__ = lambda self : None;
ImageReader_swigregister = _fission.ImageReader_swigregister
ImageReader_swigregister(ImageReader)

class ImageWriter(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_ImageWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_ImageWriter
    __del__ = lambda self : None;
ImageWriter_swigregister = _fission.ImageWriter_swigregister
ImageWriter_swigregister(ImageWriter)

class NodeGraph(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeGraph, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _fission.delete_NodeGraph
    __del__ = lambda self : None;
    def createNode(*args): return _fission.NodeGraph_createNode(*args)
NodeGraph_swigregister = _fission.NodeGraph_swigregister
NodeGraph_swigregister(NodeGraph)

class Parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_Parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_Parameter
    __del__ = lambda self : None;
Parameter_swigregister = _fission.Parameter_swigregister
Parameter_swigregister(Parameter)

NameParameter = _fission.NameParameter
SUCCESS = _fission.SUCCESS
ERROR = _fission.ERROR


