# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fission', [dirname(__file__)])
        except ImportError:
            import _fission
            return _fission
        if fp is not None:
            try:
                _mod = imp.load_module('_fission', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fission = swig_import_helper()
    del swig_import_helper
else:
    import _fission
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_Context(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_Context
    __del__ = lambda self : None;
    __swig_setmethods__["m_first"] = _fission.Context_m_first_set
    __swig_getmethods__["m_first"] = _fission.Context_m_first_get
    if _newclass:m_first = _swig_property(_fission.Context_m_first_get, _fission.Context_m_first_set)
    __swig_setmethods__["m_last"] = _fission.Context_m_last_set
    __swig_getmethods__["m_last"] = _fission.Context_m_last_get
    if _newclass:m_last = _swig_property(_fission.Context_m_last_get, _fission.Context_m_last_set)
Context_swigregister = _fission.Context_swigregister
Context_swigregister(Context)

class Engine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _fission.new_Engine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_Engine
    __del__ = lambda self : None;
    def compute_async(self, *args): return _fission.Engine_compute_async(self, *args)
    def compute(self, *args): return _fission.Engine_compute(self, *args)
Engine_swigregister = _fission.Engine_swigregister
Engine_swigregister(Engine)


def nodename(*args):
  return _fission.nodename(*args)
nodename = _fission.nodename
class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fission.delete_Node
    __del__ = lambda self : None;
    def name(self): return _fission.Node_name(self)
Node_swigregister = _fission.Node_swigregister
Node_swigregister(Node)


def connect(*args):
  return _fission.connect(*args)
connect = _fission.connect

def disconnect(*args):
  return _fission.disconnect(*args)
disconnect = _fission.disconnect

def setParameter(*args):
  return _fission.setParameter(*args)
setParameter = _fission.setParameter
class GLDisplay(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLDisplay, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLDisplay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_GLDisplay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_GLDisplay
    __del__ = lambda self : None;
    def displayLastResult(self): return _fission.GLDisplay_displayLastResult(self)
GLDisplay_swigregister = _fission.GLDisplay_swigregister
GLDisplay_swigregister(GLDisplay)

class ImageReader(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageReader, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_ImageReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_ImageReader
    __del__ = lambda self : None;
ImageReader_swigregister = _fission.ImageReader_swigregister
ImageReader_swigregister(ImageReader)

class ImageWriter(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fission.new_ImageWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_ImageWriter
    __del__ = lambda self : None;
ImageWriter_swigregister = _fission.ImageWriter_swigregister
ImageWriter_swigregister(ImageWriter)

class Parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _fission.new_Parameter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fission.delete_Parameter
    __del__ = lambda self : None;
Parameter_swigregister = _fission.Parameter_swigregister
Parameter_swigregister(Parameter)


def NameParameter(*args):
  return _fission.NameParameter(*args)
NameParameter = _fission.NameParameter
SUCCESS = _fission.SUCCESS
ERROR = _fission.ERROR


